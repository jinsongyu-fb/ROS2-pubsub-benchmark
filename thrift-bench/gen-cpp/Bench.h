/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Bench_H
#define Bench_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "timing_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BenchIf {
 public:
  virtual ~BenchIf() {}
  virtual int64_t bench(const timing& arg) = 0;
};

class BenchIfFactory {
 public:
  typedef BenchIf Handler;

  virtual ~BenchIfFactory() {}

  virtual BenchIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BenchIf* /* handler */) = 0;
  };

class BenchIfSingletonFactory : virtual public BenchIfFactory {
 public:
  BenchIfSingletonFactory(const ::std::shared_ptr<BenchIf>& iface) : iface_(iface) {}
  virtual ~BenchIfSingletonFactory() {}

  virtual BenchIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(BenchIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<BenchIf> iface_;
};

class BenchNull : virtual public BenchIf {
 public:
  virtual ~BenchNull() {}
  int64_t bench(const timing& /* arg */) override {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _Bench_bench_args__isset {
  _Bench_bench_args__isset() : arg(false) {}
  bool arg :1;
} _Bench_bench_args__isset;

class Bench_bench_args {
 public:

  Bench_bench_args(const Bench_bench_args&);
  Bench_bench_args& operator=(const Bench_bench_args&);
  Bench_bench_args() noexcept {
  }

  virtual ~Bench_bench_args() noexcept;
  timing arg;

  _Bench_bench_args__isset __isset;

  void __set_arg(const timing& val);

  bool operator == (const Bench_bench_args & rhs) const
  {
    if (!(arg == rhs.arg))
      return false;
    return true;
  }
  bool operator != (const Bench_bench_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bench_bench_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Bench_bench_pargs {
 public:


  virtual ~Bench_bench_pargs() noexcept;
  const timing* arg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bench_bench_result__isset {
  _Bench_bench_result__isset() : success(false) {}
  bool success :1;
} _Bench_bench_result__isset;

class Bench_bench_result {
 public:

  Bench_bench_result(const Bench_bench_result&) noexcept;
  Bench_bench_result& operator=(const Bench_bench_result&) noexcept;
  Bench_bench_result() noexcept
                     : success(0) {
  }

  virtual ~Bench_bench_result() noexcept;
  int64_t success;

  _Bench_bench_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const Bench_bench_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Bench_bench_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Bench_bench_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Bench_bench_presult__isset {
  _Bench_bench_presult__isset() : success(false) {}
  bool success :1;
} _Bench_bench_presult__isset;

class Bench_bench_presult {
 public:


  virtual ~Bench_bench_presult() noexcept;
  int64_t* success;

  _Bench_bench_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BenchClient : virtual public BenchIf {
 public:
  BenchClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BenchClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t bench(const timing& arg) override;
  void send_bench(const timing& arg);
  int64_t recv_bench();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BenchProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<BenchIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (BenchProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_bench(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BenchProcessor(::std::shared_ptr<BenchIf> iface) :
    iface_(iface) {
    processMap_["bench"] = &BenchProcessor::process_bench;
  }

  virtual ~BenchProcessor() {}
};

class BenchProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BenchProcessorFactory(const ::std::shared_ptr< BenchIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< BenchIfFactory > handlerFactory_;
};

class BenchMultiface : virtual public BenchIf {
 public:
  BenchMultiface(std::vector<std::shared_ptr<BenchIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BenchMultiface() {}
 protected:
  std::vector<std::shared_ptr<BenchIf> > ifaces_;
  BenchMultiface() {}
  void add(::std::shared_ptr<BenchIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t bench(const timing& arg) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bench(arg);
    }
    return ifaces_[i]->bench(arg);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BenchConcurrentClient : virtual public BenchIf {
 public:
  BenchConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  BenchConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t bench(const timing& arg) override;
  int32_t send_bench(const timing& arg);
  int64_t recv_bench(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
