/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef timing_TYPES_H
#define timing_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class timing;

typedef struct _timing__isset {
  _timing__isset() : msgid(false), nanosec(false), source(false) {}
  bool msgid :1;
  bool nanosec :1;
  bool source :1;
} _timing__isset;

class timing : public virtual ::apache::thrift::TBase {
 public:

  timing(const timing&);
  timing& operator=(const timing&);
  timing() noexcept
         : msgid(0),
           nanosec(0),
           source() {
  }

  virtual ~timing() noexcept;
  int64_t msgid;
  int64_t nanosec;
  std::string source;

  _timing__isset __isset;

  void __set_msgid(const int64_t val);

  void __set_nanosec(const int64_t val);

  void __set_source(const std::string& val);

  bool operator == (const timing & rhs) const
  {
    if (!(msgid == rhs.msgid))
      return false;
    if (!(nanosec == rhs.nanosec))
      return false;
    if (!(source == rhs.source))
      return false;
    return true;
  }
  bool operator != (const timing &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const timing & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(timing &a, timing &b);

std::ostream& operator<<(std::ostream& out, const timing& obj);



#endif
